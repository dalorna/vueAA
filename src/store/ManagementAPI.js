import ManagementApiClient from './ManagementApiClient';
/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
export class AssetsClient extends ManagementApiClient {
  constructor(baseUrl, http) {
    super();
    this.jsonParseReviver = undefined;
    this.http = http ? http : window;
    this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
  }
  /**
   * @deprecated
   */
  getAll() {
    let url_ = this.baseUrl + "/api/Assets/GetAll";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetAll(_response);
    });
  }
  processGetAll(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (resultData200 && resultData200.constructor === Array) {
          result200 = [];
          for (let item of resultData200)
            result200.push(Template.fromJS(item));
        }
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Retrieves an asset by its identifier
   * @param assetId The identifier for the asset being sought
   * @return The asset being sought, null if not found
   */
  getAsset(assetId) {
    let url_ = this.baseUrl + "/api/Assets/{assetId}";
    if (assetId === undefined || assetId === null)
      throw new Error("The parameter 'assetId' must be defined.");
    url_ = url_.replace("{assetId}", encodeURIComponent("" + assetId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetAsset(_response);
    });
  }
  processGetAsset(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfAssetModel.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Retrieves assets by their identifiers in bulk
   * @param assetIds The identifiers for the assets being sought
   * @return An array of assets being sought, an empty list if none are found.
   */
  getAssetsInBulk(assetIds) {
    let url_ = this.baseUrl + "/api/Assets/bulk-retrieve";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(assetIds);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetAssetsInBulk(_response);
    });
  }
  processGetAssetsInBulk(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfAssetModelOf.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * @deprecated
   */
  deleteClassification(classificationId) {
    let url_ = this.baseUrl + "/api/Assets/classification/{classificationId}";
    if (classificationId === undefined || classificationId === null)
      throw new Error("The parameter 'classificationId' must be defined.");
    url_ = url_.replace("{classificationId}", encodeURIComponent("" + classificationId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "DELETE",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDeleteClassification(_response);
    });
  }
  processDeleteClassification(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfBoolean.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * @deprecated
   */
  getTemplatesForAClassification(classificationId) {
    let url_ = this.baseUrl + "/api/Assets/classification/{classificationId}";
    if (classificationId === undefined || classificationId === null)
      throw new Error("The parameter 'classificationId' must be defined.");
    url_ = url_.replace("{classificationId}", encodeURIComponent("" + classificationId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetTemplatesForAClassification(_response);
    });
  }
  processGetTemplatesForAClassification(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (resultData200 && resultData200.constructor === Array) {
          result200 = [];
          for (let item of resultData200)
            result200.push(Template.fromJS(item));
        }
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * @deprecated
   */
  getClasifications() {
    let url_ = this.baseUrl + "/api/Assets/GetClassifications";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetClasifications(_response);
    });
  }
  processGetClasifications(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (resultData200 && resultData200.constructor === Array) {
          result200 = [];
          for (let item of resultData200)
            result200.push(AssetCategory.fromJS(item));
        }
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Gets multiple asset templates in a single bulk operation
   * @param templateIds The identifiers for the asset templates to retrieve
   * @return An array of asset templates
   */
  getTemplatesInBulk(templateIds) {
    let url_ = this.baseUrl + "/api/Assets/template/bulk-retrieve";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(templateIds);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetTemplatesInBulk(_response);
    });
  }
  processGetTemplatesInBulk(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfTemplateOf.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Saves an asset and gets the asset
   * @param asset The asset to save
   * @return The asset
   */
  saveAndGetAsset(asset) {
    let url_ = this.baseUrl + "/api/Assets/with-refresh";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(asset);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveAndGetAsset(_response);
    });
  }
  processSaveAndGetAsset(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfAssetModel.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Saves an asset and gets the asset in bulk
   * @param assets The assets to save
   * @return The asset
   */
  saveAndGetAssetInBulk(assets) {
    let url_ = this.baseUrl + "/api/Assets/bulk/with-refresh";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(assets);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveAndGetAssetInBulk(_response);
    });
  }
  processSaveAndGetAssetInBulk(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfListOfAssetModel.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Saves and asset classification and returns the asset
   * @param classification The classification to save
   * @return The classification
   * @deprecated
   */
  saveAndGetClassification(classification) {
    let url_ = this.baseUrl + "/api/Assets/classification/with-refresh";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(classification);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveAndGetClassification(_response);
    });
  }
  processSaveAndGetClassification(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfClassification.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Saves a template and gets the template
   * @param template The template to save
   * @return The template
   * @deprecated
   */
  saveAndGetTemplate(template) {
    let url_ = this.baseUrl + "/api/Assets/template/with-refresh";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(template);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveAndGetTemplate(_response);
    });
  }
  processSaveAndGetTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Saves a classification
   * @param classification The classification to save
   * @return The classification identifier
   * @deprecated
   */
  saveClassification(classification) {
    let url_ = this.baseUrl + "/api/Assets/classification";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(classification);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveClassification(_response);
    });
  }
  processSaveClassification(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfAssetCategory.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Save a template
   * @param template The template to save
   * @return The template identifier
   */
  saveTemplate(template) {
    let url_ = this.baseUrl + "/api/Assets/template";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(template);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveTemplate(_response);
    });
  }
  processSaveTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfGuid.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Deletes an asset template
   * @param classificationId The identifier for the classification of the template to delete
   * @param templateId The identifier for the document template to delete
   * @return true if successful, othewise false
   * @deprecated
   */
  deleteTemplate(classificationId, templateId) {
    let url_ = this.baseUrl + "/api/Assets/template/{classificationId}/{templateId}";
    if (classificationId === undefined || classificationId === null)
      throw new Error("The parameter 'classificationId' must be defined.");
    url_ = url_.replace("{classificationId}", encodeURIComponent("" + classificationId));
    if (templateId === undefined || templateId === null)
      throw new Error("The parameter 'templateId' must be defined.");
    url_ = url_.replace("{templateId}", encodeURIComponent("" + templateId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "DELETE",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDeleteTemplate(_response);
    });
  }
  processDeleteTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfBoolean.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
}
export class AssetTemplatesClient extends ManagementApiClient {
  constructor(baseUrl, http) {
    super();
    this.jsonParseReviver = undefined;
    this.http = http ? http : window;
    this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
  }
  /**
   * Returns the Asset Template for the specified locatorId.
   * @param id Guid specifying the locator id for the Asset Template.
   * @return DataResponse containing the Template object. In the event of an exception, it returns an error and description of the error.
   */
  getAssetTemplate(id) {
    let url_ = this.baseUrl + "/AssetTemplates/{Id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{Id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetAssetTemplate(_response);
    });
  }
  processGetAssetTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Deletes a template from being displayed or selected.
   * @param id The Id of template being deleted.
   * @return True/False whether the template was able to be deleted.
   */
  deleteTemplate(id) {
    let url_ = this.baseUrl + "/AssetTemplates/{Id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{Id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "DELETE",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDeleteTemplate(_response);
    });
  }
  processDeleteTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfBoolean.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Gets Asset Categories for the logged in user.
   * @return A DataResponse object with a collection of AssetCategory objects
   */
  getAssetCategories() {
    let url_ = this.baseUrl + "/AssetTemplates/categories";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetAssetCategories(_response);
    });
  }
  processGetAssetCategories(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfIListOfAssetCategory.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Gets the Asset Templates for the selected category.
   * @param categoryId Provides the category id to specify the asset templates.
   */
  getAssetTemplatesByCategoryId(categoryId) {
    let url_ = this.baseUrl + "/AssetTemplates/category/{categoryId}";
    if (categoryId === undefined || categoryId === null)
      throw new Error("The parameter 'categoryId' must be defined.");
    url_ = url_.replace("{categoryId}", encodeURIComponent("" + categoryId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetAssetTemplatesByCategoryId(_response);
    });
  }
  processGetAssetTemplatesByCategoryId(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfIListOfTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Deletes a category from being displayed or selected.
   * @param categoryId The Id of category being deleted.
   * @return True/False whether the category was able to be deleted.
   */
  deleteCategory(categoryId) {
    let url_ = this.baseUrl + "/AssetTemplates/category/{categoryId}";
    if (categoryId === undefined || categoryId === null)
      throw new Error("The parameter 'categoryId' must be defined.");
    url_ = url_.replace("{categoryId}", encodeURIComponent("" + categoryId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "DELETE",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDeleteCategory(_response);
    });
  }
  processDeleteCategory(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfBoolean.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  saveAssetTemplate(template) {
    let url_ = this.baseUrl + "/AssetTemplates/template";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(template);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveAssetTemplate(_response);
    });
  }
  processSaveAssetTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  saveCategory(category) {
    let url_ = this.baseUrl + "/AssetTemplates/category";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(category);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveCategory(_response);
    });
  }
  processSaveCategory(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfAssetCategory.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  getAllAssetTemplates() {
    let url_ = this.baseUrl + "/AssetTemplates/AllTemplates";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetAllAssetTemplates(_response);
    });
  }
  processGetAllAssetTemplates(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfListOfTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
}
export class ChecklistClient extends ManagementApiClient {
  constructor(baseUrl, http) {
    super();
    this.jsonParseReviver = undefined;
    this.http = http ? http : window;
    this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
  }
  /**
   * @param startChecklistPackage Start checklist package.
   * @return The check list.
   */
  startCheckList(startChecklistPackage) {
    let url_ = this.baseUrl + "/Checklist";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(startChecklistPackage);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processStartCheckList(_response);
    });
  }
  processStartCheckList(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfListOfChecklist.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  startReclaim(entityId) {
    let url_ = this.baseUrl + "/Checklist/StartReclaim?";
    if (entityId === undefined || entityId === null)
      throw new Error("The parameter 'entityId' must be defined and cannot be null.");
    else
      url_ += "entityId=" + encodeURIComponent("" + entityId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processStartReclaim(_response);
    });
  }
  processStartReclaim(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfChecklist.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  getReclaimChecklist(entityId) {
    let url_ = this.baseUrl + "/Checklist/GetReclaim?";
    if (entityId === undefined || entityId === null)
      throw new Error("The parameter 'entityId' must be defined and cannot be null.");
    else
      url_ += "entityId=" + encodeURIComponent("" + entityId) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetReclaimChecklist(_response);
    });
  }
  processGetReclaimChecklist(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfChecklist.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Gets the check list instance tasks.
   * @param ownerId id
   * @return The check list instance tasks.
   */
  getCheckListInstanceTasksByOwnerId(ownerId) {
    let url_ = this.baseUrl + "/Checklist/OwnerId/{ownerId}";
    if (ownerId === undefined || ownerId === null)
      throw new Error("The parameter 'ownerId' must be defined.");
    url_ = url_.replace("{ownerId}", encodeURIComponent("" + ownerId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetCheckListInstanceTasksByOwnerId(_response);
    });
  }
  processGetCheckListInstanceTasksByOwnerId(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfChecklistInstanceDetail.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  getCheckListInstanceTasksByGroupId(groupId) {
    let url_ = this.baseUrl + "/Checklist/GroupId/{groupId}";
    if (groupId === undefined || groupId === null)
      throw new Error("The parameter 'groupId' must be defined.");
    url_ = url_.replace("{groupId}", encodeURIComponent("" + groupId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetCheckListInstanceTasksByGroupId(_response);
    });
  }
  processGetCheckListInstanceTasksByGroupId(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfChecklistInstanceDetail.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
}
export class ChecklistTemplateClient extends ManagementApiClient {
  constructor(baseUrl, http) {
    super();
    this.jsonParseReviver = undefined;
    this.http = http ? http : window;
    this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
  }
  getChecklistTemplate(templateId) {
    let url_ = this.baseUrl + "/ChecklistTemplate/{templateId}";
    if (templateId === undefined || templateId === null)
      throw new Error("The parameter 'templateId' must be defined.");
    url_ = url_.replace("{templateId}", encodeURIComponent("" + templateId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetChecklistTemplate(_response);
    });
  }
  processGetChecklistTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfChecklistTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  getTemplates(includeTasks) {
    let url_ = this.baseUrl + "/ChecklistTemplate/{includeTasks}";
    if (includeTasks === undefined || includeTasks === null)
      throw new Error("The parameter 'includeTasks' must be defined.");
    url_ = url_.replace("{includeTasks}", encodeURIComponent("" + includeTasks));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetTemplates(_response);
    });
  }
  processGetTemplates(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfListOfChecklistTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  saveTemplate(checklistTemplate) {
    let url_ = this.baseUrl + "/ChecklistTemplate";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(checklistTemplate);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveTemplate(_response);
    });
  }
  processSaveTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfChecklistTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  deleteTemplate(checklistTemplateId) {
    let url_ = this.baseUrl + "/ChecklistTemplate/{checklistTemplateId}";
    if (checklistTemplateId === undefined || checklistTemplateId === null)
      throw new Error("The parameter 'checklistTemplateId' must be defined.");
    url_ = url_.replace("{checklistTemplateId}", encodeURIComponent("" + checklistTemplateId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "DELETE",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDeleteTemplate(_response);
    });
  }
  processDeleteTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfBoolean.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
}
export class DashboardClient extends ManagementApiClient {
  constructor(baseUrl, http) {
    super();
    this.jsonParseReviver = undefined;
    this.http = http ? http : window;
    this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
  }
  getUsersWithStats() {
    let url_ = this.baseUrl + "/api/persona/getuserswithstats";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetUsersWithStats(_response);
    });
  }
  processGetUsersWithStats(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? StandardActionResultOfListOfEmployeeStats.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  getUserTaskCounts() {
    let url_ = this.baseUrl + "/api/persona/getusertaskcounts";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetUserTaskCounts(_response);
    });
  }
  processGetUserTaskCounts(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? StandardActionResultOfListOfEmployeeStats.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  getUsersWithAssets() {
    let url_ = this.baseUrl + "/api/persona/getuserswithassets";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetUsersWithAssets(_response);
    });
  }
  processGetUsersWithAssets(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? StandardActionResultOfListOfPersonaAssetsDTO.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
}
export class DocumentClient extends ManagementApiClient {
  constructor(baseUrl, http) {
    super();
    this.jsonParseReviver = undefined;
    this.http = http ? http : window;
    this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
  }
  /**
   * Gets all document classifications
   * @return A collection of document classifications
   */
  getDocumentClassifications() {
    let url_ = this.baseUrl + "/api/Document/classification";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetDocumentClassifications(_response);
    });
  }
  processGetDocumentClassifications(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfListOfClassification.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Saves a classification
   * @param classification The classification to save
   * @return The identifier for the classification saved
   */
  saveClassification(classification) {
    let url_ = this.baseUrl + "/api/Document/classification";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(classification);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveClassification(_response);
    });
  }
  processSaveClassification(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfDocumentCategory.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Saves a classification and returns the updated classification
   * @param classification The classification to save
   * @return The classification
   */
  saveAndGetClassification(classification) {
    let url_ = this.baseUrl + "/api/Document/classification/with-refresh";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(classification);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveAndGetClassification(_response);
    });
  }
  processSaveAndGetClassification(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfDocumentCategory.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Deletes a document classification
   * @param classificationId The identifier for the document classification to delete
   * @return true if successful, otherwise false
   */
  deleteClassification(classificationId) {
    let url_ = this.baseUrl + "/api/Document/classification/{classificationId}";
    if (classificationId === undefined || classificationId === null)
      throw new Error("The parameter 'classificationId' must be defined.");
    url_ = url_.replace("{classificationId}", encodeURIComponent("" + classificationId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "DELETE",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDeleteClassification(_response);
    });
  }
  processDeleteClassification(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfBoolean.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Deletes document classifications in bulk
   * @param classificationIds The identifiers for the document classifications to delete
   * @return true if successful, otherwise false
   */
  deleteClassificationsInBulk(classificationIds) {
    let url_ = this.baseUrl + "/api/Document/classification/bulk-delete";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(classificationIds);
    let options_ = {
      body: content_,
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDeleteClassificationsInBulk(_response);
    });
  }
  processDeleteClassificationsInBulk(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfBoolean.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Gets all templates associated with a classification
   * @return A collection of document templates for the given classification
   */
  getDocumentTemplatesByClassification(classificationId) {
    let url_ = this.baseUrl + "/api/Document/template/{classificationId}";
    if (classificationId === undefined || classificationId === null)
      throw new Error("The parameter 'classificationId' must be defined.");
    url_ = url_.replace("{classificationId}", encodeURIComponent("" + classificationId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetDocumentTemplatesByClassification(_response);
    });
  }
  processGetDocumentTemplatesByClassification(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfListOfTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Get a document template by templateId
   * @param templateId The identifier for the document template to retrieve
   * @return A document template for a given templateId
   */
  getDocumentTemplate(templateId) {
    let url_ = this.baseUrl + "/api/Document/template/{templateId}";
    if (templateId === undefined || templateId === null)
      throw new Error("The parameter 'templateId' must be defined.");
    url_ = url_.replace("{templateId}", encodeURIComponent("" + templateId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetDocumentTemplate(_response);
    });
  }
  processGetDocumentTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Deletes a document template
   * @param templateId The identifier for the document template to delete
   * @return true if successful, othewise false
   */
  deleteTemplate(templateId) {
    let url_ = this.baseUrl + "/api/Document/template/{templateId}";
    if (templateId === undefined || templateId === null)
      throw new Error("The parameter 'templateId' must be defined.");
    url_ = url_.replace("{templateId}", encodeURIComponent("" + templateId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "DELETE",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDeleteTemplate(_response);
    });
  }
  processDeleteTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfBoolean.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Gets a specific template
   * @param classificationId The template's classification id
   * @param templateId The template's identifier
   * @return A document template, null if not found.
   */
  getDocumentTemplate2(classificationId, templateId) {
    let url_ = this.baseUrl + "/api/Document/template/{classificationId}/{templateId}";
    if (classificationId === undefined || classificationId === null)
      throw new Error("The parameter 'classificationId' must be defined.");
    url_ = url_.replace("{classificationId}", encodeURIComponent("" + classificationId));
    if (templateId === undefined || templateId === null)
      throw new Error("The parameter 'templateId' must be defined.");
    url_ = url_.replace("{templateId}", encodeURIComponent("" + templateId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetDocumentTemplate2(_response);
    });
  }
  processGetDocumentTemplate2(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Gets all document templates regardless of classification
   * @return A collection of document templates
   */
  getDocumentTemplates() {
    let url_ = this.baseUrl + "/api/Document/template";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetDocumentTemplates(_response);
    });
  }
  processGetDocumentTemplates(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfListOfTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Saves a document template
   * @param template The document template to save
   * @return The identifier for the document template
   */
  saveTemplate(template) {
    let url_ = this.baseUrl + "/api/Document/template";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(template);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveTemplate(_response);
    });
  }
  processSaveTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfGuid.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Saves a template and gets the updated template
   * @param template The template to save
   * @return The template
   */
  saveAndGetTemplate(template) {
    let url_ = this.baseUrl + "/api/Document/template/with-refresh";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(template);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveAndGetTemplate(_response);
    });
  }
  processSaveAndGetTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Saves a template and associated attachment
   * @param attachment (optional)
   * @param template (optional)
   */
  saveTemplateWithAttachment(attachment, template) {
    let url_ = this.baseUrl + "/document/template/with-attachment";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = new FormData();
    if (attachment !== null && attachment !== undefined)
      content_.append("attachment", attachment.data, attachment.fileName ? attachment.fileName : "attachment");
    if (template !== null && template !== undefined)
      content_.append("template", template.toString());
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveTemplateWithAttachment(_response);
    });
  }
  processSaveTemplateWithAttachment(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? StandardActionResultOfBoolean.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Deletes document templates in bulk
   * @param templateIds The identifiers for the document templates to delete
   * @return true if successful, otherwise false
   */
  deleteTemplatesInBulk(templateIds) {
    let url_ = this.baseUrl + "/api/Document/templates/bulk-delete";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(templateIds);
    let options_ = {
      body: content_,
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDeleteTemplatesInBulk(_response);
    });
  }
  processDeleteTemplatesInBulk(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfBoolean.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Gets a document
   * @param assetId The document identifier
   * @return The document being sought, null if not found
   */
  getDocument(assetId) {
    let url_ = this.baseUrl + "/api/Document/{assetId}";
    if (assetId === undefined || assetId === null)
      throw new Error("The parameter 'assetId' must be defined.");
    url_ = url_.replace("{assetId}", encodeURIComponent("" + assetId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetDocument(_response);
    });
  }
  processGetDocument(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfAssetModel.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Deletes a document
   * @param documentId The identifier for the docuemnt to delete
   * @return true if successful, otherwise false
   */
  deleteDocument(documentId) {
    let url_ = this.baseUrl + "/api/Document/{documentId}";
    if (documentId === undefined || documentId === null)
      throw new Error("The parameter 'documentId' must be defined.");
    url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "DELETE",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDeleteDocument(_response);
    });
  }
  processDeleteDocument(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfBoolean.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Deletes documents in bulk
   * @param documentIds The identifiers for the documents to delete
   * @return true if successful, otherwise false
   */
  deleteDocumentsInBulk(documentIds) {
    let url_ = this.baseUrl + "/api/Document/bulk-delete";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(documentIds);
    let options_ = {
      body: content_,
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDeleteDocumentsInBulk(_response);
    });
  }
  processDeleteDocumentsInBulk(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfBoolean.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Saves an asset with an attachment
   * @param attachment (optional)
   * @param data (optional)
   */
  saveDocumentWithAttachment(attachment, data) {
    let url_ = this.baseUrl + "/api/Document/with-attachment";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = new FormData();
    if (attachment !== null && attachment !== undefined)
      content_.append("attachment", attachment.data, attachment.fileName ? attachment.fileName : "attachment");
    if (data !== null && data !== undefined)
      content_.append("data", data.toString());
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveDocumentWithAttachment(_response);
    });
  }
  processSaveDocumentWithAttachment(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? StandardActionResultOfBoolean.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Uploads an attachment for a document template instance
   * @param attachment (optional)
   * @param templateId (optional)
   */
  uploadTemplateAttachment(attachment, templateId) {
    let url_ = this.baseUrl + "/document/template/upload-attachment";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = new FormData();
    if (attachment !== null && attachment !== undefined)
      content_.append("attachment", attachment.data, attachment.fileName ? attachment.fileName : "attachment");
    if (templateId !== null && templateId !== undefined)
      content_.append("templateId", templateId.toString());
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processUploadTemplateAttachment(_response);
    });
  }
  processUploadTemplateAttachment(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? StandardActionResultOfGuid.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Downloads and attachment for a document asset
   * @param documentId The document asset id
   */
  downloadAttachment(documentId) {
    let url_ = this.baseUrl + "/document/{documentId}/download-attachment";
    if (documentId === undefined || documentId === null)
      throw new Error("The parameter 'documentId' must be defined.");
    url_ = url_.replace("{documentId}", encodeURIComponent("" + documentId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDownloadAttachment(_response);
    });
  }
  processDownloadAttachment(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? StandardActionResult.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Downloads an attachment associated with the template
   * @param attachmentId The identifier for the attachment record
   * @return A file stream
   */
  downloadTemplateAttachment(attachmentId) {
    let url_ = this.baseUrl + "/document/template/download-attachment/{attachmentId}";
    if (attachmentId === undefined || attachmentId === null)
      throw new Error("The parameter 'attachmentId' must be defined.");
    url_ = url_.replace("{attachmentId}", encodeURIComponent("" + attachmentId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDownloadTemplateAttachment(_response);
    });
  }
  processDownloadTemplateAttachment(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 404) {
      return response.text().then((_responseText) => {
        let result404 = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = resultData404 ? StandardActionResult.fromJS(resultData404) : null;
        return throwException("A server error occurred.", status, _responseText, _headers, result404);
      });
    }
    else if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
      const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Downloads an attachment associated with the template
   * @param templateId The identifier for the template that owns the attachment
   */
  downloadTemplateAttachmentLink(templateId) {
    let url_ = this.baseUrl + "/document/template/{templateId}/download-link";
    if (templateId === undefined || templateId === null)
      throw new Error("The parameter 'templateId' must be defined.");
    url_ = url_.replace("{templateId}", encodeURIComponent("" + templateId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDownloadTemplateAttachmentLink(_response);
    });
  }
  processDownloadTemplateAttachmentLink(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? StandardActionResultOfString.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Uploads an attachment for a document template instance
   * @param attachment (optional)
   * @param assetId (optional)
   */
  uploadAssetAttachment(attachment, assetId) {
    let url_ = this.baseUrl + "/document/asset/upload-attachment";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = new FormData();
    if (attachment !== null && attachment !== undefined)
      content_.append("attachment", attachment.data, attachment.fileName ? attachment.fileName : "attachment");
    if (assetId !== null && assetId !== undefined)
      content_.append("assetId", assetId.toString());
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processUploadAssetAttachment(_response);
    });
  }
  processUploadAssetAttachment(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? StandardActionResultOfAssetModel.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Downloads an document attachment
   * @param attachmentId The identifier for the attachment record
   * @return A file stream
   */
  downloadAssetAttachment(attachmentId) {
    let url_ = this.baseUrl + "/document/asset/download-attachment/{attachmentId}";
    if (attachmentId === undefined || attachmentId === null)
      throw new Error("The parameter 'attachmentId' must be defined.");
    url_ = url_.replace("{attachmentId}", encodeURIComponent("" + attachmentId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDownloadAssetAttachment(_response);
    });
  }
  processDownloadAssetAttachment(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 404) {
      return response.text().then((_responseText) => {
        let result404 = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = resultData404 ? StandardActionResult.fromJS(resultData404) : null;
        return throwException("A server error occurred.", status, _responseText, _headers, result404);
      });
    }
    else if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
      const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
}
export class PersonaClient extends ManagementApiClient {
  constructor(baseUrl, http) {
    super();
    this.jsonParseReviver = undefined;
    this.http = http ? http : window;
    this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
  }
  /**
   * Returns all users for the current tenant.
   * @return A list of users.
   */
  getUsers() {
    let url_ = this.baseUrl + "/api/Persona/getusers";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetUsers(_response);
    });
  }
  processGetUsers(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? StandardActionResultOfListOfExternalReferenceUser.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Gets users for a specified group.
   * @param groupid Identifier for the group to which the users belong
   */
  getGroupUsers(groupid) {
    let url_ = this.baseUrl + "/api/Persona/getgroupusers/{groupid}";
    if (groupid === undefined || groupid === null)
      throw new Error("The parameter 'groupid' must be defined.");
    url_ = url_.replace("{groupid}", encodeURIComponent("" + groupid));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetGroupUsers(_response);
    });
  }
  processGetGroupUsers(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? StandardActionResultOfListOfExternalReferenceUser.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Gets the asset and the data (if there's any) for Hr Form taker
   * @param id Task Instance Id
   */
  getTaskDataById(id) {
    let url_ = this.baseUrl + "/api/Persona/getTaskDataById?";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined and cannot be null.");
    else
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetTaskDataById(_response);
    });
  }
  processGetTaskDataById(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfTaskAssets.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
}
export class StatsClient extends ManagementApiClient {
  constructor(baseUrl, http) {
    super();
    this.jsonParseReviver = undefined;
    this.http = http ? http : window;
    this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
  }
  /**
   * Get stats
   */
  getStats() {
    let url_ = this.baseUrl + "/Stats";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetStats(_response);
    });
  }
  processGetStats(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? StandardActionResultOfStatsDTO.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
}
export class TasksClient extends ManagementApiClient {
  constructor(baseUrl, http) {
    super();
    this.jsonParseReviver = undefined;
    this.http = http ? http : window;
    this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
  }
  getTask(taskId) {
    let url_ = this.baseUrl + "/Tasks/{taskId}";
    if (taskId === undefined || taskId === null)
      throw new Error("The parameter 'taskId' must be defined.");
    url_ = url_.replace("{taskId}", encodeURIComponent("" + taskId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetTask(_response);
    });
  }
  processGetTask(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfChecklistTaskDetail.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  getTaskByEntityId(entityId) {
    let url_ = this.baseUrl + "/Tasks/entity/{entityId}";
    if (entityId === undefined || entityId === null)
      throw new Error("The parameter 'entityId' must be defined.");
    url_ = url_.replace("{entityId}", encodeURIComponent("" + entityId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetTaskByEntityId(_response);
    });
  }
  processGetTaskByEntityId(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfListOfChecklistTask.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Saves a Task
   */
  saveTask(task) {
    let url_ = this.baseUrl + "/Tasks";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(task);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveTask(_response);
    });
  }
  processSaveTask(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfChecklistTask.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * @return status
   */
  statusChange(status) {
    let url_ = this.baseUrl + "/Tasks/status";
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(status);
    let options_ = {
      body: content_,
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processStatusChange(_response);
    });
  }
  processStatusChange(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfChecklistTaskDetail.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
}
export class TaskTemplateClient extends ManagementApiClient {
  constructor(baseUrl, http) {
    super();
    this.jsonParseReviver = undefined;
    this.http = http ? http : window;
    this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
  }
  getTaskTemplate(taskTemplateId) {
    let url_ = this.baseUrl + "/{taskTemplateId}";
    if (taskTemplateId === undefined || taskTemplateId === null)
      throw new Error("The parameter 'taskTemplateId' must be defined.");
    url_ = url_.replace("{taskTemplateId}", encodeURIComponent("" + taskTemplateId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetTaskTemplate(_response);
    });
  }
  processGetTaskTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfTaskTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  getTemplatesByChecklistTemplateId(checklistTemplateId) {
    let url_ = this.baseUrl + "/{checklistTemplateId}";
    if (checklistTemplateId === undefined || checklistTemplateId === null)
      throw new Error("The parameter 'checklistTemplateId' must be defined.");
    url_ = url_.replace("{checklistTemplateId}", encodeURIComponent("" + checklistTemplateId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetTemplatesByChecklistTemplateId(_response);
    });
  }
  processGetTemplatesByChecklistTemplateId(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfListOfTaskTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  /**
   * Save a task template, and needs to have the checklist it belongs to
   */
  saveTemplate(checklistTemplateId, taskTemplate) {
    let url_ = this.baseUrl + "/{checklistTemplateId}";
    if (checklistTemplateId === undefined || checklistTemplateId === null)
      throw new Error("The parameter 'checklistTemplateId' must be defined.");
    url_ = url_.replace("{checklistTemplateId}", encodeURIComponent("" + checklistTemplateId));
    url_ = url_.replace(/[?&]$/, "");
    const content_ = JSON.stringify(taskTemplate);
    let options_ = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processSaveTemplate(_response);
    });
  }
  processSaveTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfTaskTemplate.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
  deleteTemplate(taskTemplateId) {
    let url_ = this.baseUrl + "/TaskTemplate/{taskTemplateId}";
    if (taskTemplateId === undefined || taskTemplateId === null)
      throw new Error("The parameter 'taskTemplateId' must be defined.");
    url_ = url_.replace("{taskTemplateId}", encodeURIComponent("" + taskTemplateId));
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "DELETE",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processDeleteTemplate(_response);
    });
  }
  processDeleteTemplate(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfBoolean.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
}
export class TenantClient extends ManagementApiClient {
  constructor(baseUrl, http) {
    super();
    this.jsonParseReviver = undefined;
    this.http = http ? http : window;
    this.baseUrl = baseUrl ? baseUrl : this.getBaseUrl("");
  }
  getUserTenants() {
    let url_ = this.baseUrl + "/getusertenants";
    url_ = url_.replace(/[?&]$/, "");
    let options_ = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };
    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response) => {
      return this.processGetUserTenants(_response);
    });
  }
  processGetUserTenants(response) {
    const status = response.status;
    let _headers = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v, k) => _headers[k] = v);
    }
    ;
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200 = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 ? DataResponseOfListOfTenant.fromJS(resultData200) : null;
        return result200;
      });
    }
    else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve(null);
  }
}
export class ModelBase3 {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.id = data["id"];
      this.name = data["name"];
      this.status = data["status"];
      this.updateIdentity = data["updateIdentity"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    throw new Error("The abstract class 'ModelBase3' cannot be instantiated.");
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["status"] = this.status;
    data["updateIdentity"] = this.updateIdentity;
    return data;
  }
}
export class Template extends ModelBase3 {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.clientId = data["clientId"];
      this.tenantId = data["tenantId"];
      this.libraryType = data["libraryType"];
      this.categoryId = data["categoryId"];
      this.description = data["description"];
      if (data["properties"] && data["properties"].constructor === Array) {
        this.properties = [];
        for (let item of data["properties"])
          this.properties.push(item);
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new Template();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["clientId"] = this.clientId;
    data["tenantId"] = this.tenantId;
    data["libraryType"] = this.libraryType;
    data["categoryId"] = this.categoryId;
    data["description"] = this.description;
    if (this.properties && this.properties.constructor === Array) {
      data["properties"] = [];
      for (let item of this.properties)
        data["properties"].push(item);
    }
    super.toJSON(data);
    return data;
  }
}
export class CommonResponse {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.success = data["success"];
      if (data["messages"] && data["messages"].constructor === Array) {
        this.messages = [];
        for (let item of data["messages"])
          this.messages.push(Response.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new CommonResponse();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["success"] = this.success;
    if (this.messages && this.messages.constructor === Array) {
      data["messages"] = [];
      for (let item of this.messages)
        data["messages"].push(item.toJSON());
    }
    return data;
  }
}
export class DataResponseOfAssetModel extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.data = data["data"] ? AssetModel.fromJS(data["data"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfAssetModel();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : undefined;
    super.toJSON(data);
    return data;
  }
}
export class AssetModel extends ModelBase3 {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.clientId = data["clientId"];
      this.entityId = data["entityId"];
      this.tenantId = data["tenantId"];
      this.templateId = data["templateId"];
      this.categoryId = data["categoryId"];
      this.libraryType = data["libraryType"];
      this.name = data["name"];
      this.description = data["description"];
      if (data["properties"] && data["properties"].constructor === Array) {
        this.properties = [];
        for (let item of data["properties"])
          this.properties.push(item);
      }
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(item);
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AssetModel();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["clientId"] = this.clientId;
    data["entityId"] = this.entityId;
    data["tenantId"] = this.tenantId;
    data["templateId"] = this.templateId;
    data["categoryId"] = this.categoryId;
    data["libraryType"] = this.libraryType;
    data["name"] = this.name;
    data["description"] = this.description;
    if (this.properties && this.properties.constructor === Array) {
      data["properties"] = [];
      for (let item of this.properties)
        data["properties"].push(item);
    }
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item);
    }
    super.toJSON(data);
    return data;
  }
}
export class Response {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.message = data["message"];
      this.statusCode = data["statusCode"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new Response();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["message"] = this.message;
    data["statusCode"] = this.statusCode;
    return data;
  }
}
export var HttpStatusCode;
(function (HttpStatusCode) {
  HttpStatusCode[HttpStatusCode["Continue"] = 100] = "Continue";
  HttpStatusCode[HttpStatusCode["SwitchingProtocols"] = 101] = "SwitchingProtocols";
  HttpStatusCode[HttpStatusCode["Processing"] = 102] = "Processing";
  HttpStatusCode[HttpStatusCode["EarlyHints"] = 103] = "EarlyHints";
  HttpStatusCode[HttpStatusCode["OK"] = 200] = "OK";
  HttpStatusCode[HttpStatusCode["Created"] = 201] = "Created";
  HttpStatusCode[HttpStatusCode["Accepted"] = 202] = "Accepted";
  HttpStatusCode[HttpStatusCode["NonAuthoritativeInformation"] = 203] = "NonAuthoritativeInformation";
  HttpStatusCode[HttpStatusCode["NoContent"] = 204] = "NoContent";
  HttpStatusCode[HttpStatusCode["ResetContent"] = 205] = "ResetContent";
  HttpStatusCode[HttpStatusCode["PartialContent"] = 206] = "PartialContent";
  HttpStatusCode[HttpStatusCode["MultiStatus"] = 207] = "MultiStatus";
  HttpStatusCode[HttpStatusCode["AlreadyReported"] = 208] = "AlreadyReported";
  HttpStatusCode[HttpStatusCode["IMUsed"] = 226] = "IMUsed";
  HttpStatusCode[HttpStatusCode["MultipleChoices"] = 300] = "MultipleChoices";
  HttpStatusCode[HttpStatusCode["Ambiguous"] = 300] = "Ambiguous";
  HttpStatusCode[HttpStatusCode["MovedPermanently"] = 301] = "MovedPermanently";
  HttpStatusCode[HttpStatusCode["Moved"] = 301] = "Moved";
  HttpStatusCode[HttpStatusCode["Found"] = 302] = "Found";
  HttpStatusCode[HttpStatusCode["Redirect"] = 302] = "Redirect";
  HttpStatusCode[HttpStatusCode["SeeOther"] = 303] = "SeeOther";
  HttpStatusCode[HttpStatusCode["RedirectMethod"] = 303] = "RedirectMethod";
  HttpStatusCode[HttpStatusCode["NotModified"] = 304] = "NotModified";
  HttpStatusCode[HttpStatusCode["UseProxy"] = 305] = "UseProxy";
  HttpStatusCode[HttpStatusCode["Unused"] = 306] = "Unused";
  HttpStatusCode[HttpStatusCode["TemporaryRedirect"] = 307] = "TemporaryRedirect";
  HttpStatusCode[HttpStatusCode["RedirectKeepVerb"] = 307] = "RedirectKeepVerb";
  HttpStatusCode[HttpStatusCode["PermanentRedirect"] = 308] = "PermanentRedirect";
  HttpStatusCode[HttpStatusCode["BadRequest"] = 400] = "BadRequest";
  HttpStatusCode[HttpStatusCode["Unauthorized"] = 401] = "Unauthorized";
  HttpStatusCode[HttpStatusCode["PaymentRequired"] = 402] = "PaymentRequired";
  HttpStatusCode[HttpStatusCode["Forbidden"] = 403] = "Forbidden";
  HttpStatusCode[HttpStatusCode["NotFound"] = 404] = "NotFound";
  HttpStatusCode[HttpStatusCode["MethodNotAllowed"] = 405] = "MethodNotAllowed";
  HttpStatusCode[HttpStatusCode["NotAcceptable"] = 406] = "NotAcceptable";
  HttpStatusCode[HttpStatusCode["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
  HttpStatusCode[HttpStatusCode["RequestTimeout"] = 408] = "RequestTimeout";
  HttpStatusCode[HttpStatusCode["Conflict"] = 409] = "Conflict";
  HttpStatusCode[HttpStatusCode["Gone"] = 410] = "Gone";
  HttpStatusCode[HttpStatusCode["LengthRequired"] = 411] = "LengthRequired";
  HttpStatusCode[HttpStatusCode["PreconditionFailed"] = 412] = "PreconditionFailed";
  HttpStatusCode[HttpStatusCode["RequestEntityTooLarge"] = 413] = "RequestEntityTooLarge";
  HttpStatusCode[HttpStatusCode["RequestUriTooLong"] = 414] = "RequestUriTooLong";
  HttpStatusCode[HttpStatusCode["UnsupportedMediaType"] = 415] = "UnsupportedMediaType";
  HttpStatusCode[HttpStatusCode["RequestedRangeNotSatisfiable"] = 416] = "RequestedRangeNotSatisfiable";
  HttpStatusCode[HttpStatusCode["ExpectationFailed"] = 417] = "ExpectationFailed";
  HttpStatusCode[HttpStatusCode["MisdirectedRequest"] = 421] = "MisdirectedRequest";
  HttpStatusCode[HttpStatusCode["UnprocessableEntity"] = 422] = "UnprocessableEntity";
  HttpStatusCode[HttpStatusCode["Locked"] = 423] = "Locked";
  HttpStatusCode[HttpStatusCode["FailedDependency"] = 424] = "FailedDependency";
  HttpStatusCode[HttpStatusCode["UpgradeRequired"] = 426] = "UpgradeRequired";
  HttpStatusCode[HttpStatusCode["PreconditionRequired"] = 428] = "PreconditionRequired";
  HttpStatusCode[HttpStatusCode["TooManyRequests"] = 429] = "TooManyRequests";
  HttpStatusCode[HttpStatusCode["RequestHeaderFieldsTooLarge"] = 431] = "RequestHeaderFieldsTooLarge";
  HttpStatusCode[HttpStatusCode["UnavailableForLegalReasons"] = 451] = "UnavailableForLegalReasons";
  HttpStatusCode[HttpStatusCode["InternalServerError"] = 500] = "InternalServerError";
  HttpStatusCode[HttpStatusCode["NotImplemented"] = 501] = "NotImplemented";
  HttpStatusCode[HttpStatusCode["BadGateway"] = 502] = "BadGateway";
  HttpStatusCode[HttpStatusCode["ServiceUnavailable"] = 503] = "ServiceUnavailable";
  HttpStatusCode[HttpStatusCode["GatewayTimeout"] = 504] = "GatewayTimeout";
  HttpStatusCode[HttpStatusCode["HttpVersionNotSupported"] = 505] = "HttpVersionNotSupported";
  HttpStatusCode[HttpStatusCode["VariantAlsoNegotiates"] = 506] = "VariantAlsoNegotiates";
  HttpStatusCode[HttpStatusCode["InsufficientStorage"] = 507] = "InsufficientStorage";
  HttpStatusCode[HttpStatusCode["LoopDetected"] = 508] = "LoopDetected";
  HttpStatusCode[HttpStatusCode["NotExtended"] = 510] = "NotExtended";
  HttpStatusCode[HttpStatusCode["NetworkAuthenticationRequired"] = 511] = "NetworkAuthenticationRequired";
})(HttpStatusCode || (HttpStatusCode = {}));
export class DataResponseOfAssetModelOf extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(AssetModel.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfAssetModelOf();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfBoolean extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.data = data["data"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfBoolean();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data;
    super.toJSON(data);
    return data;
  }
}
export class Category extends ModelBase3 {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.clientId = data["clientId"];
      this.tenantId = data["tenantId"];
      this.libraryType = data["libraryType"];
      this.name = data["name"];
      this.description = data["description"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new Category();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["clientId"] = this.clientId;
    data["tenantId"] = this.tenantId;
    data["libraryType"] = this.libraryType;
    data["name"] = this.name;
    data["description"] = this.description;
    super.toJSON(data);
    return data;
  }
}
export class AssetCategory extends Category {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AssetCategory();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfTemplateOf extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(Template.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfTemplateOf();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfListOfAssetModel extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(AssetModel.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfListOfAssetModel();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfClassification extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.data = data["data"] ? Classification.fromJS(data["data"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfClassification();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : undefined;
    super.toJSON(data);
    return data;
  }
}
export class Classification extends Category {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new Classification();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfTemplate extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.data = data["data"] ? Template.fromJS(data["data"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfTemplate();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : undefined;
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfAssetCategory extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.data = data["data"] ? AssetCategory.fromJS(data["data"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfAssetCategory();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : undefined;
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfGuid extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.data = data["data"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfGuid();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data;
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfIListOfAssetCategory extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(AssetCategory.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfIListOfAssetCategory();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfIListOfTemplate extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(Template.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfIListOfTemplate();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfListOfTemplate extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(Template.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfListOfTemplate();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfListOfChecklist extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(Checklist.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfListOfChecklist();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}
export class Base {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.id = data["id"];
      this.status = data["status"];
      this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : undefined;
      this.updateDate = data["updateDate"] ? new Date(data["updateDate"].toString()) : undefined;
      this.createIdentity = data["createIdentity"];
      this.updateIdentity = data["updateIdentity"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new Base();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["status"] = this.status;
    data["createDate"] = this.createDate ? this.createDate.toISOString() : undefined;
    data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : undefined;
    data["createIdentity"] = this.createIdentity;
    data["updateIdentity"] = this.updateIdentity;
    return data;
  }
}
export class Checklist extends Base {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.clientId = data["clientId"];
      this.tenantId = data["tenantId"];
      this.ownerId = data["ownerId"];
      this.entityId = data["entityId"];
      this.templateId = data["templateId"];
      this.name = data["name"];
      this.description = data["description"];
      if (data["tasks"] && data["tasks"].constructor === Array) {
        this.tasks = [];
        for (let item of data["tasks"])
          this.tasks.push(ChecklistTask.fromJS(item));
      }
      this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : undefined;
      this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : undefined;
      this.checklistTemplate = data["checklistTemplate"] ? ChecklistTemplate.fromJS(data["checklistTemplate"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new Checklist();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["clientId"] = this.clientId;
    data["tenantId"] = this.tenantId;
    data["ownerId"] = this.ownerId;
    data["entityId"] = this.entityId;
    data["templateId"] = this.templateId;
    data["name"] = this.name;
    data["description"] = this.description;
    if (this.tasks && this.tasks.constructor === Array) {
      data["tasks"] = [];
      for (let item of this.tasks)
        data["tasks"].push(item.toJSON());
    }
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["checklistTemplate"] = this.checklistTemplate ? this.checklistTemplate.toJSON() : undefined;
    super.toJSON(data);
    return data;
  }
}
export class ChecklistTask extends Base {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.clientId = data["clientId"];
      this.tenantId = data["tenantId"];
      this.entityId = data["entityId"];
      this.templateId = data["templateId"];
      this.checklistId = data["checklistId"];
      this.name = data["name"];
      this.description = data["description"];
      this.claimUser = data["claimUser"] ? ExternalReference.fromJS(data["claimUser"]) : undefined;
      if (data["assets"] && data["assets"].constructor === Array) {
        this.assets = [];
        for (let item of data["assets"])
          this.assets.push(item);
      }
      if (data["assignees"] && data["assignees"].constructor === Array) {
        this.assignees = [];
        for (let item of data["assignees"])
          this.assignees.push(item);
      }
      this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : undefined;
      this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : undefined;
      this.dueDate = data["dueDate"] ? new Date(data["dueDate"].toString()) : undefined;
      this.overDue = data["overDue"];
      this.taskTemplate = data["taskTemplate"] ? TaskTemplate.fromJS(data["taskTemplate"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ChecklistTask();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["clientId"] = this.clientId;
    data["tenantId"] = this.tenantId;
    data["entityId"] = this.entityId;
    data["templateId"] = this.templateId;
    data["checklistId"] = this.checklistId;
    data["name"] = this.name;
    data["description"] = this.description;
    data["claimUser"] = this.claimUser ? this.claimUser.toJSON() : undefined;
    if (this.assets && this.assets.constructor === Array) {
      data["assets"] = [];
      for (let item of this.assets)
        data["assets"].push(item);
    }
    if (this.assignees && this.assignees.constructor === Array) {
      data["assignees"] = [];
      for (let item of this.assignees)
        data["assignees"].push(item);
    }
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : undefined;
    data["overDue"] = this.overDue;
    data["taskTemplate"] = this.taskTemplate ? this.taskTemplate.toJSON() : undefined;
    super.toJSON(data);
    return data;
  }
}
export class ExternalReference extends Base {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.tenantId = data["tenantId"];
      this.key = data["key"];
      this.name = data["name"];
      this.referenceType = data["referenceType"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ExternalReference();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["tenantId"] = this.tenantId;
    data["key"] = this.key;
    data["name"] = this.name;
    data["referenceType"] = this.referenceType;
    super.toJSON(data);
    return data;
  }
}
export var ReferenceType;
(function (ReferenceType) {
  ReferenceType[ReferenceType["NotSet"] = 0] = "NotSet";
  ReferenceType[ReferenceType["Group"] = 1] = "Group";
  ReferenceType[ReferenceType["User"] = 2] = "User";
  ReferenceType[ReferenceType["AccountPlatform"] = 3] = "AccountPlatform";
  ReferenceType[ReferenceType["Account"] = 4] = "Account";
})(ReferenceType || (ReferenceType = {}));
export class TaskTemplate extends Base {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.clientId = data["clientId"];
      this.tenantId = data["tenantId"];
      this.name = data["name"];
      this.description = data["description"];
      if (data["assets"] && data["assets"].constructor === Array) {
        this.assets = [];
        for (let item of data["assets"])
          this.assets.push(item);
      }
      if (data["assignees"] && data["assignees"].constructor === Array) {
        this.assignees = [];
        for (let item of data["assignees"])
          this.assignees.push(item);
      }
      if (data["allowedTenants"] && data["allowedTenants"].constructor === Array) {
        this.allowedTenants = [];
        for (let item of data["allowedTenants"])
          this.allowedTenants.push(item);
      }
      this.completionInterval = data["completionInterval"];
      this.deactivationDate = data["deactivationDate"] ? new Date(data["deactivationDate"].toString()) : undefined;
      this.deactivationIdentity = data["deactivationIdentity"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TaskTemplate();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["clientId"] = this.clientId;
    data["tenantId"] = this.tenantId;
    data["name"] = this.name;
    data["description"] = this.description;
    if (this.assets && this.assets.constructor === Array) {
      data["assets"] = [];
      for (let item of this.assets)
        data["assets"].push(item);
    }
    if (this.assignees && this.assignees.constructor === Array) {
      data["assignees"] = [];
      for (let item of this.assignees)
        data["assignees"].push(item);
    }
    if (this.allowedTenants && this.allowedTenants.constructor === Array) {
      data["allowedTenants"] = [];
      for (let item of this.allowedTenants)
        data["allowedTenants"].push(item);
    }
    data["completionInterval"] = this.completionInterval;
    data["deactivationDate"] = this.deactivationDate ? this.deactivationDate.toISOString() : undefined;
    data["deactivationIdentity"] = this.deactivationIdentity;
    super.toJSON(data);
    return data;
  }
}
export class ChecklistTemplate extends Base {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.clientId = data["clientId"];
      this.tenantId = data["tenantId"];
      this.category = data["category"];
      this.name = data["name"];
      this.description = data["description"];
      if (data["tasks"] && data["tasks"].constructor === Array) {
        this.tasks = [];
        for (let item of data["tasks"])
          this.tasks.push(TaskTemplate.fromJS(item));
      }
      this.deactivationDate = data["deactivationDate"] ? new Date(data["deactivationDate"].toString()) : undefined;
      this.deactivationIdentity = data["deactivationIdentity"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ChecklistTemplate();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["clientId"] = this.clientId;
    data["tenantId"] = this.tenantId;
    data["category"] = this.category;
    data["name"] = this.name;
    data["description"] = this.description;
    if (this.tasks && this.tasks.constructor === Array) {
      data["tasks"] = [];
      for (let item of this.tasks)
        data["tasks"].push(item.toJSON());
    }
    data["deactivationDate"] = this.deactivationDate ? this.deactivationDate.toISOString() : undefined;
    data["deactivationIdentity"] = this.deactivationIdentity;
    super.toJSON(data);
    return data;
  }
}
export class StartChecklistPackage {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.checklistTemplateId = data["checklistTemplateId"];
      this.name = data["name"];
      if (data["additionalTaskTemplateIds"] && data["additionalTaskTemplateIds"].constructor === Array) {
        this.additionalTaskTemplateIds = [];
        for (let item of data["additionalTaskTemplateIds"])
          this.additionalTaskTemplateIds.push(item);
      }
      if (data["associatedEntity"] && data["associatedEntity"].constructor === Array) {
        this.associatedEntity = [];
        for (let item of data["associatedEntity"])
          this.associatedEntity.push(item);
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StartChecklistPackage();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["checklistTemplateId"] = this.checklistTemplateId;
    data["name"] = this.name;
    if (this.additionalTaskTemplateIds && this.additionalTaskTemplateIds.constructor === Array) {
      data["additionalTaskTemplateIds"] = [];
      for (let item of this.additionalTaskTemplateIds)
        data["additionalTaskTemplateIds"].push(item);
    }
    if (this.associatedEntity && this.associatedEntity.constructor === Array) {
      data["associatedEntity"] = [];
      for (let item of this.associatedEntity)
        data["associatedEntity"].push(item);
    }
    return data;
  }
}
export class DataResponseOfChecklist extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.data = data["data"] ? Checklist.fromJS(data["data"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfChecklist();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : undefined;
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfChecklistInstanceDetail extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.data = data["data"] ? ChecklistInstanceDetail.fromJS(data["data"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfChecklistInstanceDetail();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : undefined;
    super.toJSON(data);
    return data;
  }
}
export class ChecklistInstanceDetail {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.checklistId = data["checklistId"];
      this.clientId = data["clientId"];
      this.tenantId = data["tenantId"];
      this.ownerId = data["ownerId"];
      this.entityId = data["entityId"];
      this.templateId = data["templateId"];
      this.name = data["name"];
      this.description = data["description"];
      this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : undefined;
      this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : undefined;
      if (data["tasks"] && data["tasks"].constructor === Array) {
        this.tasks = [];
        for (let item of data["tasks"])
          this.tasks.push(ChecklistTaskDetail.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ChecklistInstanceDetail();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["checklistId"] = this.checklistId;
    data["clientId"] = this.clientId;
    data["tenantId"] = this.tenantId;
    data["ownerId"] = this.ownerId;
    data["entityId"] = this.entityId;
    data["templateId"] = this.templateId;
    data["name"] = this.name;
    data["description"] = this.description;
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    if (this.tasks && this.tasks.constructor === Array) {
      data["tasks"] = [];
      for (let item of this.tasks)
        data["tasks"].push(item.toJSON());
    }
    return data;
  }
}
export class ChecklistTaskDetail {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.id = data["id"];
      this.clientId = data["clientId"];
      this.tenantId = data["tenantId"];
      this.entityId = data["entityId"];
      this.templateId = data["templateId"];
      this.name = data["name"];
      this.description = data["description"];
      if (data["claimUser"] && data["claimUser"].constructor === Array) {
        this.claimUser = [];
        for (let item of data["claimUser"])
          this.claimUser.push(ExternalReference.fromJS(item));
      }
      if (data["assets"] && data["assets"].constructor === Array) {
        this.assets = [];
        for (let item of data["assets"])
          this.assets.push(item);
      }
      if (data["assignees"] && data["assignees"].constructor === Array) {
        this.assignees = [];
        for (let item of data["assignees"])
          this.assignees.push(ExternalReference.fromJS(item));
      }
      this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : undefined;
      this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : undefined;
      this.dueDate = data["dueDate"] ? new Date(data["dueDate"].toString()) : undefined;
      this.overDue = data["overDue"];
      this.status = data["status"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ChecklistTaskDetail();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["clientId"] = this.clientId;
    data["tenantId"] = this.tenantId;
    data["entityId"] = this.entityId;
    data["templateId"] = this.templateId;
    data["name"] = this.name;
    data["description"] = this.description;
    if (this.claimUser && this.claimUser.constructor === Array) {
      data["claimUser"] = [];
      for (let item of this.claimUser)
        data["claimUser"].push(item.toJSON());
    }
    if (this.assets && this.assets.constructor === Array) {
      data["assets"] = [];
      for (let item of this.assets)
        data["assets"].push(item);
    }
    if (this.assignees && this.assignees.constructor === Array) {
      data["assignees"] = [];
      for (let item of this.assignees)
        data["assignees"].push(item.toJSON());
    }
    data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined;
    data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined;
    data["dueDate"] = this.dueDate ? this.dueDate.toISOString() : undefined;
    data["overDue"] = this.overDue;
    data["status"] = this.status;
    return data;
  }
}
export class DataResponseOfChecklistTemplate extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.data = data["data"] ? ChecklistTemplate.fromJS(data["data"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfChecklistTemplate();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : undefined;
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfListOfChecklistTemplate extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(ChecklistTemplate.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfListOfChecklistTemplate();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}
export class StandardActionResultOfListOfEmployeeStats {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(EmployeeStats.fromJS(item));
      }
      if (data["errorMessages"] && data["errorMessages"].constructor === Array) {
        this.errorMessages = [];
        for (let item of data["errorMessages"])
          this.errorMessages.push(item);
      }
      this.statusCode = data["statusCode"];
      this.successful = data["successful"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StandardActionResultOfListOfEmployeeStats();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    if (this.errorMessages && this.errorMessages.constructor === Array) {
      data["errorMessages"] = [];
      for (let item of this.errorMessages)
        data["errorMessages"].push(item);
    }
    data["statusCode"] = this.statusCode;
    data["successful"] = this.successful;
    return data;
  }
}
export class EmployeeStats {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.id = data["id"];
      this.name = data["name"];
      this.title = data["title"];
      this.key = data["key"];
      this.location = data["location"];
      this.overdueTasks = data["overdueTasks"];
      this.unclaimedTasks = data["unclaimedTasks"];
      this.tasksinProgress = data["tasksinProgress"];
      this.completedTasks = data["completedTasks"];
      this.employeeStatus = data["employeeStatus"];
      if (data["tasks"] && data["tasks"].constructor === Array) {
        this.tasks = [];
        for (let item of data["tasks"])
          this.tasks.push(ChecklistTask.fromJS(item));
      }
      this.newTasks = data["newTasks"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new EmployeeStats();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["title"] = this.title;
    data["key"] = this.key;
    data["location"] = this.location;
    data["overdueTasks"] = this.overdueTasks;
    data["unclaimedTasks"] = this.unclaimedTasks;
    data["tasksinProgress"] = this.tasksinProgress;
    data["completedTasks"] = this.completedTasks;
    data["employeeStatus"] = this.employeeStatus;
    if (this.tasks && this.tasks.constructor === Array) {
      data["tasks"] = [];
      for (let item of this.tasks)
        data["tasks"].push(item.toJSON());
    }
    data["newTasks"] = this.newTasks;
    return data;
  }
}
export var HireStatus;
(function (HireStatus) {
  HireStatus[HireStatus["NotSet"] = 0] = "NotSet";
  HireStatus[HireStatus["NewHire"] = 1] = "NewHire";
  HireStatus[HireStatus["Employee"] = 2] = "Employee";
  HireStatus[HireStatus["InActive"] = 3] = "InActive";
})(HireStatus || (HireStatus = {}));
export class StandardActionResultOfListOfPersonaAssetsDTO {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(PersonaAssetsDTO.fromJS(item));
      }
      if (data["errorMessages"] && data["errorMessages"].constructor === Array) {
        this.errorMessages = [];
        for (let item of data["errorMessages"])
          this.errorMessages.push(item);
      }
      this.statusCode = data["statusCode"];
      this.successful = data["successful"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StandardActionResultOfListOfPersonaAssetsDTO();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    if (this.errorMessages && this.errorMessages.constructor === Array) {
      data["errorMessages"] = [];
      for (let item of this.errorMessages)
        data["errorMessages"].push(item);
    }
    data["statusCode"] = this.statusCode;
    data["successful"] = this.successful;
    return data;
  }
}
export class PersonaAssetsDTO {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.id = data["id"];
      this.name = data["name"];
      this.title = data["title"];
      this.location = data["location"];
      if (data["assets"] && data["assets"].constructor === Array) {
        this.assets = [];
        for (let item of data["assets"])
          this.assets.push(AssetModel.fromJS(item));
      }
      this.assetsActive = data["assetsActive"];
      this.assetsInactive = data["assetsInactive"];
      this.employeeStatus = data["employeeStatus"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new PersonaAssetsDTO();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["title"] = this.title;
    data["location"] = this.location;
    if (this.assets && this.assets.constructor === Array) {
      data["assets"] = [];
      for (let item of this.assets)
        data["assets"].push(item.toJSON());
    }
    data["assetsActive"] = this.assetsActive;
    data["assetsInactive"] = this.assetsInactive;
    data["employeeStatus"] = this.employeeStatus;
    return data;
  }
}
export class DataResponseOfListOfClassification extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(Classification.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfListOfClassification();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfDocumentCategory extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.data = data["data"] ? DocumentCategory.fromJS(data["data"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfDocumentCategory();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : undefined;
    super.toJSON(data);
    return data;
  }
}
export class DocumentCategory extends Base {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.clientId = data["clientId"];
      this.tenantId = data["tenantId"];
      this.libraryType = data["libraryType"];
      this.name = data["name"];
      this.description = data["description"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DocumentCategory();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["clientId"] = this.clientId;
    data["tenantId"] = this.tenantId;
    data["libraryType"] = this.libraryType;
    data["name"] = this.name;
    data["description"] = this.description;
    super.toJSON(data);
    return data;
  }
}
export class StandardActionResultOfBoolean {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.data = data["data"];
      if (data["errorMessages"] && data["errorMessages"].constructor === Array) {
        this.errorMessages = [];
        for (let item of data["errorMessages"])
          this.errorMessages.push(item);
      }
      this.statusCode = data["statusCode"];
      this.successful = data["successful"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StandardActionResultOfBoolean();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data;
    if (this.errorMessages && this.errorMessages.constructor === Array) {
      data["errorMessages"] = [];
      for (let item of this.errorMessages)
        data["errorMessages"].push(item);
    }
    data["statusCode"] = this.statusCode;
    data["successful"] = this.successful;
    return data;
  }
}
export class StandardActionResultOfGuid {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.data = data["data"];
      if (data["errorMessages"] && data["errorMessages"].constructor === Array) {
        this.errorMessages = [];
        for (let item of data["errorMessages"])
          this.errorMessages.push(item);
      }
      this.statusCode = data["statusCode"];
      this.successful = data["successful"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StandardActionResultOfGuid();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data;
    if (this.errorMessages && this.errorMessages.constructor === Array) {
      data["errorMessages"] = [];
      for (let item of this.errorMessages)
        data["errorMessages"].push(item);
    }
    data["statusCode"] = this.statusCode;
    data["successful"] = this.successful;
    return data;
  }
}
export class StandardActionResultOfObject {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.data = data["data"];
      if (data["errorMessages"] && data["errorMessages"].constructor === Array) {
        this.errorMessages = [];
        for (let item of data["errorMessages"])
          this.errorMessages.push(item);
      }
      this.statusCode = data["statusCode"];
      this.successful = data["successful"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StandardActionResultOfObject();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data;
    if (this.errorMessages && this.errorMessages.constructor === Array) {
      data["errorMessages"] = [];
      for (let item of this.errorMessages)
        data["errorMessages"].push(item);
    }
    data["statusCode"] = this.statusCode;
    data["successful"] = this.successful;
    return data;
  }
}
export class StandardActionResult extends StandardActionResultOfObject {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StandardActionResult();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    super.toJSON(data);
    return data;
  }
}
export class StandardActionResultOfString {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.data = data["data"];
      if (data["errorMessages"] && data["errorMessages"].constructor === Array) {
        this.errorMessages = [];
        for (let item of data["errorMessages"])
          this.errorMessages.push(item);
      }
      this.statusCode = data["statusCode"];
      this.successful = data["successful"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StandardActionResultOfString();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data;
    if (this.errorMessages && this.errorMessages.constructor === Array) {
      data["errorMessages"] = [];
      for (let item of this.errorMessages)
        data["errorMessages"].push(item);
    }
    data["statusCode"] = this.statusCode;
    data["successful"] = this.successful;
    return data;
  }
}
export class StandardActionResultOfAssetModel {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.data = data["data"] ? AssetModel.fromJS(data["data"]) : undefined;
      if (data["errorMessages"] && data["errorMessages"].constructor === Array) {
        this.errorMessages = [];
        for (let item of data["errorMessages"])
          this.errorMessages.push(item);
      }
      this.statusCode = data["statusCode"];
      this.successful = data["successful"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StandardActionResultOfAssetModel();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : undefined;
    if (this.errorMessages && this.errorMessages.constructor === Array) {
      data["errorMessages"] = [];
      for (let item of this.errorMessages)
        data["errorMessages"].push(item);
    }
    data["statusCode"] = this.statusCode;
    data["successful"] = this.successful;
    return data;
  }
}
export class StandardActionResultOfListOfExternalReferenceUser {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(ExternalReferenceUser.fromJS(item));
      }
      if (data["errorMessages"] && data["errorMessages"].constructor === Array) {
        this.errorMessages = [];
        for (let item of data["errorMessages"])
          this.errorMessages.push(item);
      }
      this.statusCode = data["statusCode"];
      this.successful = data["successful"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StandardActionResultOfListOfExternalReferenceUser();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    if (this.errorMessages && this.errorMessages.constructor === Array) {
      data["errorMessages"] = [];
      for (let item of this.errorMessages)
        data["errorMessages"].push(item);
    }
    data["statusCode"] = this.statusCode;
    data["successful"] = this.successful;
    return data;
  }
}
export class ExternalReferenceUser {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.id = data["id"];
      this.userStatus = data["userStatus"];
      this.userCreatedDt = data["userCreatedDt"] ? new Date(data["userCreatedDt"].toString()) : undefined;
      this.key = data["key"];
      this.name = data["name"];
      this.referenceType = data["referenceType"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new ExternalReferenceUser();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["userStatus"] = this.userStatus;
    data["userCreatedDt"] = this.userCreatedDt ? this.userCreatedDt.toISOString() : undefined;
    data["key"] = this.key;
    data["name"] = this.name;
    data["referenceType"] = this.referenceType;
    return data;
  }
}
export class DataResponseOfTaskAssets extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.data = data["data"] ? TaskAssets.fromJS(data["data"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfTaskAssets();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : undefined;
    super.toJSON(data);
    return data;
  }
}
export class TaskAssets {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      if (data["assetInstances"] && data["assetInstances"].constructor === Array) {
        this.assetInstances = [];
        for (let item of data["assetInstances"])
          this.assetInstances.push(AssetInstance.fromJS(item));
      }
      this.taskInstance = data["taskInstance"] ? ChecklistTask.fromJS(data["taskInstance"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new TaskAssets();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.assetInstances && this.assetInstances.constructor === Array) {
      data["assetInstances"] = [];
      for (let item of this.assetInstances)
        data["assetInstances"].push(item.toJSON());
    }
    data["taskInstance"] = this.taskInstance ? this.taskInstance.toJSON() : undefined;
    return data;
  }
}
export class AssetInstance extends Base {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.clientId = data["clientId"];
      this.entityId = data["entityId"];
      this.tenantId = data["tenantId"];
      this.templateId = data["templateId"];
      this.categoryId = data["categoryId"];
      this.libraryType = data["libraryType"];
      this.name = data["name"];
      this.description = data["description"];
      if (data["properties"] && data["properties"].constructor === Array) {
        this.properties = [];
        for (let item of data["properties"])
          this.properties.push(item);
      }
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(item);
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new AssetInstance();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["clientId"] = this.clientId;
    data["entityId"] = this.entityId;
    data["tenantId"] = this.tenantId;
    data["templateId"] = this.templateId;
    data["categoryId"] = this.categoryId;
    data["libraryType"] = this.libraryType;
    data["name"] = this.name;
    data["description"] = this.description;
    if (this.properties && this.properties.constructor === Array) {
      data["properties"] = [];
      for (let item of this.properties)
        data["properties"].push(item);
    }
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item);
    }
    super.toJSON(data);
    return data;
  }
}
export class StandardActionResultOfStatsDTO {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.data = data["data"] ? StatsDTO.fromJS(data["data"]) : undefined;
      if (data["errorMessages"] && data["errorMessages"].constructor === Array) {
        this.errorMessages = [];
        for (let item of data["errorMessages"])
          this.errorMessages.push(item);
      }
      this.statusCode = data["statusCode"];
      this.successful = data["successful"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StandardActionResultOfStatsDTO();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : undefined;
    if (this.errorMessages && this.errorMessages.constructor === Array) {
      data["errorMessages"] = [];
      for (let item of this.errorMessages)
        data["errorMessages"].push(item);
    }
    data["statusCode"] = this.statusCode;
    data["successful"] = this.successful;
    return data;
  }
}
export class StatsDTO {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.unclaimedTasksCount = data["unclaimedTasksCount"];
      this.newTaskCount = data["newTaskCount"];
      this.inProgressCount = data["inProgressCount"];
      this.needsApprovalCount = data["needsApprovalCount"];
      this.overdueTasksCount = data["overdueTasksCount"];
      this.completedTasksCount = data["completedTasksCount"];
      this.newHiresCount = data["newHiresCount"];
      this.currentEmployeesCount = data["currentEmployeesCount"];
      this.pendingEmployeesCount = data["pendingEmployeesCount"];
      this.inActiveEmployeesCount = data["inActiveEmployeesCount"];
      this.employeesTotalCount = data["employeesTotalCount"];
      this.tasksCount = data["tasksCount"];
      this.assetsActive = data["assetsActive"];
      this.assetsInactive = data["assetsInactive"];
      this.assetsTotal = data["assetsTotal"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StatsDTO();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["unclaimedTasksCount"] = this.unclaimedTasksCount;
    data["newTaskCount"] = this.newTaskCount;
    data["inProgressCount"] = this.inProgressCount;
    data["needsApprovalCount"] = this.needsApprovalCount;
    data["overdueTasksCount"] = this.overdueTasksCount;
    data["completedTasksCount"] = this.completedTasksCount;
    data["newHiresCount"] = this.newHiresCount;
    data["currentEmployeesCount"] = this.currentEmployeesCount;
    data["pendingEmployeesCount"] = this.pendingEmployeesCount;
    data["inActiveEmployeesCount"] = this.inActiveEmployeesCount;
    data["employeesTotalCount"] = this.employeesTotalCount;
    data["tasksCount"] = this.tasksCount;
    data["assetsActive"] = this.assetsActive;
    data["assetsInactive"] = this.assetsInactive;
    data["assetsTotal"] = this.assetsTotal;
    return data;
  }
}
export class DataResponseOfChecklistTaskDetail extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.data = data["data"] ? ChecklistTaskDetail.fromJS(data["data"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfChecklistTaskDetail();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : undefined;
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfListOfChecklistTask extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(ChecklistTask.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfListOfChecklistTask();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfChecklistTask extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.data = data["data"] ? ChecklistTask.fromJS(data["data"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfChecklistTask();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : undefined;
    super.toJSON(data);
    return data;
  }
}
export class StatusDTO {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.taskId = data["taskId"];
      this.claimUserId = data["claimUserId"];
      this.status = data["status"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new StatusDTO();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["taskId"] = this.taskId;
    data["claimUserId"] = this.claimUserId;
    data["status"] = this.status;
    return data;
  }
}
export var Status;
(function (Status) {
  Status[Status["NotSet"] = 0] = "NotSet";
  Status[Status["New"] = 1] = "New";
  Status[Status["Assign"] = 2] = "Assign";
  Status[Status["Started"] = 3] = "Started";
  Status[Status["OverDue"] = 4] = "OverDue";
  Status[Status["Cancelled"] = 5] = "Cancelled";
  Status[Status["Completed"] = 6] = "Completed";
  Status[Status["Deleted"] = 7] = "Deleted";
})(Status || (Status = {}));
export class DataResponseOfTaskTemplate extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.data = data["data"] ? TaskTemplate.fromJS(data["data"]) : undefined;
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfTaskTemplate();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data ? this.data.toJSON() : undefined;
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfListOfTaskTemplate extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(TaskTemplate.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfListOfTaskTemplate();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}
export class DataResponseOfListOfTenant extends CommonResponse {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      if (data["data"] && data["data"].constructor === Array) {
        this.data = [];
        for (let item of data["data"])
          this.data.push(Tenant.fromJS(item));
      }
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new DataResponseOfListOfTenant();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    if (this.data && this.data.constructor === Array) {
      data["data"] = [];
      for (let item of this.data)
        data["data"].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}
export class ModelBase {
  constructor(data) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          this[property] = data[property];
      }
    }
  }
  init(data) {
    if (data) {
      this.id = data["id"];
      this.name = data["name"];
      this.status = data["status"];
      this.updateIdentity = data["updateIdentity"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    throw new Error("The abstract class 'ModelBase' cannot be instantiated.");
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["status"] = this.status;
    data["updateIdentity"] = this.updateIdentity;
    return data;
  }
}
export class Tenant extends ModelBase {
  constructor(data) {
    super(data);
  }
  init(data) {
    super.init(data);
    if (data) {
      this.accountId = data["accountId"];
      this.accountPlatformId = data["accountPlatformId"];
      this.type = data["type"];
    }
  }
  static fromJS(data) {
    data = typeof data === 'object' ? data : {};
    let result = new Tenant();
    result.init(data);
    return result;
  }
  toJSON(data) {
    data = typeof data === 'object' ? data : {};
    data["accountId"] = this.accountId;
    data["accountPlatformId"] = this.accountPlatformId;
    data["type"] = this.type;
    super.toJSON(data);
    return data;
  }
}
export class SwaggerException extends Error {
  constructor(message, status, response, headers, result) {
    super();
    this.isSwaggerException = true;
    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }
  static isSwaggerException(obj) {
    return obj.isSwaggerException === true;
  }
}
function throwException(message, status, response, headers, result) {
  if (result !== null && result !== undefined)
    throw result;
  else
    throw new SwaggerException(message, status, response, headers, null);
}
